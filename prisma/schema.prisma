// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pokemon {
  id               Int            @id
  abilities        String[]
  baseExperience   Int
  forms            Form[]
  evolutionChain   EvolutionChain @relation(fields: [evolutionChainId], references: [id])
  gameIndices      GameIndex[]
  genera           Genus[]
  height           Int
  isDefault        Boolean
  name             String         @unique
  names            Name[]
  order            Int
  stats            Stat[]
  sprite           String
  type1            String
  type2            String?
  weight           Int
  evolutionChainId Int
}

model EvolutionChain {
  id               Int       @id
  isBaby           Boolean
  species          String
  evolutionDetails String?
  evolvesTo        String
  Pokemon          Pokemon[]
}

model GameIndex {
  id        Int     @id
  version   String
  Pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId Int
}

model DamageClass {
  id           Int                      @id
  descriptions DamageClassDescription[]
  name         String
  names        DamageClassName[]
  moves        Move[]
}

model DamageClassDescription {
  description   String      @unique
  language      String
  damageClass   DamageClass @relation(fields: [damageClassId], references: [id])
  damageClassId Int
}

model DamageClassName {
  language      String
  name          String      @unique
  damageClass   DamageClass @relation(fields: [damageClassId], references: [id])
  damageClassId Int
}

// relevant if the pokémon has a 'mega' form or specialized forms like Deoxys
// (Pikachu has a bunch of 'regional cap' forms as well)
model Form {
  id        Int     @id @default(autoincrement())
  pokemonId Int
  name      String  @unique
  url       String
  Pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
}

// flavor text like 'seed pokémon' for Bulbasaur and evolutions
model Genus {
  id        Int     @id @default(autoincrement())
  pokemonId Int
  genus     String
  language  String
  Pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
}

// move names with game version available
model Move {
  id                Int               @id
  accuracy          Int
  damageClass       DamageClass       @relation(fields: [damageClassId], references: [id])
  damageClassId     Int
  effectChance      Int
  effectEntries     EffectEntry[]
  flavorTextEntries FlavorTextEntry[]
  generation        String
  learnedByPokemon  String[]
  levelLearnedAt    Int
  language          String
  name              String            @unique
  names             MoveName[]
  power             Int
  pp                Int
  priority          Int
  target            String
  type              String
  // move meta
  ailment           Ailment           @relation(fields: [ailmentId], references: [id])
  ailmentId         Int
  ailmentChance     Int
  category          MoveCategory      @relation(fields: [moveCategoryId], references: [id])
  moveCategoryId    Int
  critRate          Int
  drain             Int
  flinchChance      Int
  healing           Int
  maxHits           Int?
  maxTurns          Int?
  minHits           Int?
  minTurns          Int?
  statChance        Int
}

model MoveCategory {
  descriptions MoveCategoryDescriptions[]
  id           Int                        @id
  moves        Move[]
  name         String
}

model MoveCategoryDescriptions {
  id             Int          @id @default(autoincrement())
  description    String
  language       String
  moveCategory   MoveCategory @relation(fields: [moveCategoryId], references: [id])
  moveCategoryId Int
}

model Ailment {
  id    Int           @id
  moves String
  name  String
  names AilmentName[]
  Move  Move[]
}

model AilmentName {
  id        Int     @id @default(autoincrement())
  language  String
  name      String
  ailment   Ailment @relation(fields: [ailmentId], references: [id])
  ailmentId Int
}

model MoveName {
  id       Int    @id @default(autoincrement())
  language String
  name     String @unique
  move     Move   @relation(fields: [moveId], references: [id])
  moveId   Int
}

model FlavorTextEntry {
  id           Int    @id @default(autoincrement())
  flavorText   String @unique
  language     String
  versionGroup String
  move         Move   @relation(fields: [moveId], references: [id])
  moveId       Int
}

model EffectEntry {
  id          Int    @id @default(autoincrement())
  effect      String @unique
  language    String
  shortEffect String
  move        Move   @relation(fields: [moveId], references: [id])
  moveId      Int
}

// name of the pokémon in different languages
model Name {
  id        Int     @id @default(autoincrement())
  pokemonId Int
  name      String  @unique
  language  String
  Pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
}

// base stat of the pokémon (HP, Attack, Defence, Sp. Attack, Sp. Defence, Speed)
model Stat {
  id        Int     @id @default(autoincrement())
  pokemonId Int
  baseStat  Int
  effort    Int
  name      String
  Pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
}
