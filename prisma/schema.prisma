// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pokemon {
  id             Int         @id @unique
  abilities      String[]
  baseExperience Int?
  forms          Form[]
  gameIndices    GameIndex[]
  height         Int
  isDefault      Boolean
  moves          Move[]
  name           String      @unique
  order          Int
  species        Species?
  sprite         String
  stats          Stat[]
  type1          String
  type2          String?
  weight         Int
}

// pokémon index per game version
model GameIndex {
  id        Int     @id @unique @default(autoincrement())
  gameIndex Int
  Pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId Int
  version   String
}

// name of the pokémon in different languages
model Name {
  id        Int     @id @unique @default(autoincrement())
  name      String
  language  String
  Species   Species @relation(fields: [speciesId], references: [id])
  speciesId Int
}

// base stat of the pokémon (HP, Attack, Defence, Sp. Attack, Sp. Defence, Speed)
model Stat {
  id        Int     @id @default(autoincrement())
  baseStat  Int
  effort    Int
  name      String
  Pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId Int
}

// one-to-one relation with Pokemon?
model Species {
  id                   Int                      @id @unique
  baseHappiness        Int?
  captureRate          Int
  chain                Chain?
  color                String
  eggGroups            String[]
  evolutionChain       EvolutionChain           @relation(fields: [evolutionChainId], references: [id])
  evolutionChainId     Int                      @unique
  evolvesFromSpecies   String?
  flavorTextEntries    SpeciesFlavorTextEntry[]
  genderRate           Int
  genera               Genus[]
  generation           String
  growthRate           String
  habitat              String?
  hasGenderDifferences Boolean
  hatchCounter         Int?
  isBaby               Boolean
  isLegendary          Boolean
  isMythical           Boolean
  name                 String                   @unique
  names                Name[]
  order                Int
  pokemon              Pokemon                  @relation(fields: [pokemonId], references: [id])
  pokemonId            Int                      @unique
  pokedexNumbers       PokedexEntry[]
  shape                String
  varieties            Variety[]
}

// pokémon entry number per pokédex type
model PokedexEntry {
  id        Int     @id @default(autoincrement())
  entry     Int
  // national, kanto, original-johto, hoenn, original-sinnoh, extended-sinnoh, updated-johto, original-unova
  // updated-unova, conquest-gallery, kalos-central, kalos-coastal, kalos-mountain, updated-hoenn
  // original-alola, original-melemele, original-kalala, original-ulaula, original-poni, updated-alola
  pokedex   String
  species   Species @relation(fields: [speciesId], references: [id])
  speciesId Int
}

model SpeciesFlavorTextEntry {
  id         Int     @id @unique @default(autoincrement())
  flavorText String
  language   String
  version    String
  species    Species @relation(fields: [speciesId], references: [id])
  speciesId  Int
}

model Variety {
  id        Int     @id @default(autoincrement())
  isDefault Boolean
  pokemon   String
  species   Species @relation(fields: [speciesId], references: [id])
  speciesId Int
}

// just an id for the chain, the real data is in the Chain children
// kept it because the id is given by PokéAPI, so it's stable / meaningful
model EvolutionChain {
  id      Int      @id
  chain   Chain[]
  Species Species?
}

// actual contents of the evolution chain
// example of a recursive model
model Chain {
  id                    Int            @id @unique
  evolutionChain        EvolutionChain @relation(fields: [evolutionChainId], references: [id])
  evolutionChainId      Int
  evolvesTo             Chain[]        @relation("parentId")
  isBaby                Boolean
  parent                Chain?         @relation("parentId", fields: [parentId], references: [id])
  parentId              Int?
  species               Species        @relation(fields: [speciesId], references: [id])
  speciesId             Int            @unique
  // from `evolutionDetails` field
  // NOTE this field comes as an array from PokéAPI
  //      so there may be chains with several `evolutionDetails` items (haven't found one thus far)
  gender                Int?
  heldItem              String?
  item                  String?
  knownMove             String?
  knownMoveType         String?
  location              String?
  minAffection          Int?
  minBeauty             Int?
  minHappiness          Int?
  minLevel              Int
  needsOverworldRain    Boolean
  partySpecies          String?
  partyType             String?
  relativePhysicalStats Int?
  timeOfDay             String
  tradeSpecies          String
  trigger               String
  turnUpsideDown        Boolean
}

// relevant if the pokémon has a 'mega' form or specialized forms like Deoxys
// or Pikachu, who has a bunch of 'regional cap' forms
model Form {
  id        Int     @id @default(autoincrement())
  pokemonId Int
  name      String  @unique
  url       String
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
}

// flavor text like 'seed pokémon' for Bulbasaur and evolutions
model Genus {
  id       Int       @id @default(autoincrement())
  genus    String
  language String
  Species  Species[]
}

// move names for game versions the move is available in
model Move {
  id                Int               @id @unique
  accuracy          Int
  damageClass       DamageClass       @relation(fields: [damageClassId], references: [id])
  damageClassId     Int
  effectChance      Int
  effectEntries     EffectEntry[]
  flavorTextEntries FlavorTextEntry[]
  generation        String
  learnedByPokemon  String[]
  machines          Machine[]
  name              String            @unique
  names             MoveName[]
  pokemons          Pokemon[]
  power             Int
  pp                Int
  priority          Int
  target            String
  type              String
  // the next fields are part of the move's 'meta' data
  // usually it's own object, but kept it here instead of creating a whole new model
  ailment           Ailment           @relation(fields: [ailmentId], references: [id])
  ailmentId         Int
  ailmentChance     Int
  category          MoveCategory      @relation(fields: [categoryId], references: [id])
  categoryId        Int
  critRate          Int
  drain             Int
  flinchChance      Int
  healing           Int
  maxHits           Int?
  maxTurns          Int?
  minHits           Int?
  minTurns          Int?
  statChance        Int
}

// paralysis, sleep, freeze, burn, poison, confusion, infatuation, trap, nightmare, torment, disable, yawn
// heal-block, no-type-immunity, leech-seed, embargo, perish-song, ingrain, unknown, none
model Ailment {
  id    Int           @id @unique
  moves String
  name  String
  names AilmentName[]
  move  Move[]
}

// ailment name in all available languages
model AilmentName {
  id        Int     @id @default(autoincrement())
  language  String
  name      String
  ailment   Ailment @relation(fields: [ailmentId], references: [id])
  ailmentId Int
}

// one of: status, physical, special
model DamageClass {
  id           Int                      @id @unique
  descriptions DamageClassDescription[]
  name         String
  names        DamageClassName[]
  // moves of this damage class
  moves        Move[]
}

// damage class descriptions by language
model DamageClassDescription {
  description   String      @unique
  language      String
  damageClass   DamageClass @relation(fields: [damageClassId], references: [id])
  damageClassId Int
}

model DamageClassName {
  language      String
  name          String      @unique
  damageClass   DamageClass @relation(fields: [damageClassId], references: [id])
  damageClassId Int
}

// explanation of the move's effect (not shown in game?)
model EffectEntry {
  id          Int    @id @default(autoincrement())
  effect      String @unique
  language    String
  shortEffect String
  move        Move   @relation(fields: [moveId], references: [id])
  moveId      Int
}

// in-game move description, per language / game version
model FlavorTextEntry {
  id           Int    @id @default(autoincrement())
  flavorText   String @unique
  language     String
  move         Move   @relation(fields: [moveId], references: [id])
  moveId       Int
  versionGroup String
}

// those items containing a move to teach your pokémon
model Machine {
  id           Int    @id @unique
  item         String @unique
  moveName     String
  move         Move   @relation(fields: [moveId], references: [id])
  moveId       Int
  versionGroup String
}

// one of: damage, ailment, net-good-stats, heal, damage+ailment, swagger, damage+lower, damage+raise
// damage+heal, ohko (one-hit KO), whole-field-effect, field-effect, force-switch, unique
model MoveCategory {
  id           Int                       @id @unique
  descriptions MoveCategoryDescription[]
  moves        Move[]
  name         String
}

// move category description in all available languages
model MoveCategoryDescription {
  id          Int          @id @default(autoincrement())
  description String
  language    String
  category    MoveCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
}

model MoveName {
  id       Int    @id @default(autoincrement())
  language String
  name     String @unique
  move     Move   @relation(fields: [moveId], references: [id])
  moveId   Int
}

model Type {
  id               Int             @id @unique
  doubleDamageFrom String[]
  doubleDamageTo   String[]
  halfDamageFrom   String[]
  halfDamageTo     String[]
  noDamageFrom     String[]
  noDamageTo       String[]
  gameIndices      TypeGameIndex[]
  generation       String
  moveDamageClass  String
  moves            String[]
  name             String
  names            TypeName[]
}

model TypeGameIndex {
  id         Int    @id @unique @default(autoincrement())
  gameIndex  Int
  generation String
  Type       Type?  @relation(fields: [typeId], references: [id])
  typeId     Int?
}

model TypeName {
  id       Int    @id @unique @default(autoincrement())
  language String
  name     String
  type     Type   @relation(fields: [typeId], references: [id])
  typeId   Int
}
